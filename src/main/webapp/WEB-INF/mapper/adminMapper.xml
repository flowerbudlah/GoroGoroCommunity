<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Administrator Only Page -->
<mapper namespace="admin">

	<!-- 1. 1) 게시판 대분류 카테고리 생성 Creating new category -->
	<insert id="makeCategory" parameterType="java.lang.String">
		insert into boardcategory(boardCategoryName) values(#{boardCategoryName})
	</insert>

	<!-- 1. 2) 카테고리 이름 중복체크 Checking the duplication of category's name -->
	<select id="checkCategory" resultType="java.lang.String" parameterType="java.lang.String">
		select * from boardcategory where boardCategoryName = #{boardCategoryName}
	</select>

	<!-- 1. 3) 카테고리에 속하는 게시판 생성 Creating a board belonging to Category -->
	<insert id="makeBoard" parameterType="com.spring.dto.BoardDTO">
		insert into boardincategory(boardName, boardCategoryNo) values(#{boardName}, #{boardCategoryNo})
	</insert>

	<!-- 1. 4) 카테고리 제거 -->
	<delete id="deleteCategory" parameterType="java.lang.Integer">
		delete from boardcategory where boardCategoryNo =#{boardCategoryNo}
	</delete>	

	<!-- 1. 5) 같은 카테고리에서는 같은 이름의 게시판을 만들수 없다. Duplication checking of board's name in the same category -->
	<select id="checkSameBoardName" resultType="java.lang.String" parameterType="com.spring.dto.BoardDTO">
		select * from boardincategory where boardCategoryNo = #{boardCategoryNo} and boardName = #{boardName}
	</select>
	
	<!-- 1. 6) 게시판 이름 변경 changing of board's name -->
	<update id="changeBoardName" parameterType="com.spring.dto.BoardDTO">
		update boardincategory set boardName = #{boardName} where boardNo = #{boardNo}
	</update>

	<!-- 1. 7) 게시판이 속한 카테고리 변경 Changing the category that the Board belongs to -->
	<update id="changeCategory" parameterType="com.spring.dto.BoardDTO">
		update boardincategory set boardCategoryNo = #{boardCategoryNo} where boardNo = #{boardNo}
	</update>

	<!-- 1. 8) 게시판 제거 Removing the board -->
	<delete id="deleteBoard" parameterType="java.lang.Integer">
		delete from boardincategory where boardNo = #{boardNo}
	</delete>

	<!-- 2. 1) 회원목록 가져오기(at 관리자 페이지) -->
	<select id="takeMemberList" resultType="com.spring.dto.MemberDTO">
		select m.memberNo, m.email, m.nick, m.signUpdate, m.accountStatus, m.suspensionEndDate,
				(select count(*) from freeboard f where f.writer = m.nick ) as 'postCount',
				(select count(*) from reply r where r.replyWriter = m.nick ) as 'replyCount',
				(select count(*)
				from(select f.postNo, f.title
					from freeboard f, reportboard r, members mm
					where (f.writer = mm.nick) and (r.postNo = f.postNo) and (mm.memberNo = m.memberNo)
					group by f.postNo) newBoard ) as 'reportCount',
				(select count(*)
				from (select ms.nick, fb.postNo
						from flag fg, members ms, freeboard fb
						where (fg.postNo = fb.postNo) and (ms.nick = fb.writer) and (ms.nick = m.nick)) validCaution ) as 'flagCount'
		from members m
		order by
		memberNo ASC;
	</select>

	<!-- 2. 2) 로그인 시간 정보 가져오기 Taking the information about the real-time of the specific user's signing-in -->
	<select id="takeLoginRecord" parameterType="java.lang.String" resultType="com.spring.dto.LoginRecordDTO">
		select * from loginrecord where nick = #{nick} order by loginRecordNo desc
	</select>

	<!-- 2. 3) 회원정보 검색(at 관리자페이지) Searching the information about a specific user on the user management page -->
	<select id="searchMemberList" parameterType="com.spring.dto.MemberDTO" resultType="com.spring.dto.MemberDTO">
		select m.memberNo, m.email, m.nick, DATE_FORMAT (m.signUpDate,'%Y년%m월%d일 %H시%i분%S초') as signUp_Date, m.accountStatus, m.suspensionEndDate,
				(select count(*) from freeboard f where f.writer =m.nick ) as 'postCount',
				(select count(*) from reply r where r.replyWriter =m.nick ) as 'replyCount',
				(select count(*)
				from (select f.postNo, f.title 
						from freeboard f, reportboard r, members mm
						where (f.writer = mm.nick) and (r.postNo = f.postNo) and (mm.memberNo = m.memberNo)
						group by f.postNo ) newBoard ) as 'reportCount',
				(select count(*)
					from (select ms.nick, fb.postNo
							from flag fg, members ms, freeboard fb
							where (fg.postNo = fb.postNo) and (ms.nick = fb.writer) and (ms.nick = m.nick)) validCaution ) as 'flagCount'
		from members m
		where
		<if test="type!=null and type == 'email'">
			email like CONCAT('%',#{keyword},'%')
		</if>
		<if test="type!=null and type == 'nick'">
			nick like CONCAT('%',#{keyword},'%')
		</if>
		order by memberNo DESC
	</select>

	<!--2. 4) 특정한 한 회원이 쓴글의 수 The Number of the posts that a specific user has written -->
	<select id="postCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(*) from freeboard where writer = #{writer}
	</select>

	<!--2. 5) 특정한 한 회원이 쓴 댓글의 수 The Number of the comments that a specific user has written -->
	<select id="replyCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(*) from reply where writer = #{writer}
	</select>
	
	<!-- 2. 6) 관리자권한으로 특정회원의 아이디 로그인 일시정지시키기 Temporarily suspending Sign-in of a specific user ID by administrator -->
	<update id="makeIdSuspend" parameterType="java.lang.String">
		update members set accountStatus = 'suspend', suspensionEndDate = NOW() + INTERVAL 10 DAY where email = #{email}
	</update>

	<!-- 2. 7) 관리자 권한으로 일시정지된 아이디 활성화시키든가 아니면 정지 기간이 지난 후 자동적으로 정지기간이 끝난경우 Activating the pause ID -->
	<update id="makeIdActive" parameterType="java.lang.String">
		update members set accountStatus = "active", suspensionEndDate = null where email = #{email}
	</update>

	<!-- 3. 1) 신고된 게시글 보기 -->
	<select id="takeReportedPost" resultType="com.spring.dto.ReportDTO">
		select *, (select count(*) from adminreply where reportNo = r.reportNo) as replyCount
		from reportboard r
		order by reportNo DESC
	</select>

	<!-- 3. 2) 신고된 게시글의 수(관리자페이지에서 페이지작업으로 필요) -->
	<select id="countOfReportedPost" resultType="java.lang.Integer">
		select count(*) from reportboard
	</select>

	<!--4. 1) 관리자가 신고된 기록에 대한 댓글 달기 -->
	<insert id="writeAdminReplyProcess" parameterType="com.spring.dto.AdminReplyDTO" useGeneratedKeys="true" keyProperty="replyNo">
		insert into adminreply(reportNo, replyContent, replyWriter, replyRegDate) values(#{reportNo}, #{replyContent}, #{replyWriter}, Now())
	</insert>

	<!--4. 2) 관리자가 신고게시글에 답변한 댓글 목록 가져오기 -->
	<select id="adminReplyList" parameterType="java.lang.Integer" resultType="com.spring.dto.AdminReplyDTO">
		select * from adminreply where reportNo = #{reportNo}
	</select>

	<!-- 4. 3) 관리자가 본인이 쓴 댓글 삭제 -->
	<delete id="removeAdminReply" parameterType="java.lang.Integer">
		delete from adminreply where replyNo = #{replyNo}
	</delete>

	<!-- 1. 4) 관리자에게 신고 접수된 게시물 검색 -->
	<select id="searchList" parameterType="com.spring.dto.ReportDTO" resultType="com.spring.dto.ReportDTO">
		select *
		from reportboard
		where
		<if test="type!=null and type == 'reason'">
			reason like CONCAT('%',#{keyword},'%')
		</if>
		<if test="type!=null and type == 'reporter'">
			reporter like CONCAT('%',#{keyword},'%')
		</if>
		<if test="type!=null and type == 'postNo'">
			postNo like CONCAT('%',#{keyword},'%')
		</if>
		order by reportNo DESC
	</select>

	<!-- 1. 4) 관리자에게 신고 접수된 게시물 검색 후, "검색결과 수" 페이징 작업때문에 필효 -->
	<select id="searchCount" parameterType="com.spring.dto.ReportDTO" resultType="java.lang.Integer">
		select count(*)
		from reportboard
		where
		<if test="type!=null and type == 'reason'">
			reason like CONCAT('%',#{keyword},'%')
		</if>
		<if test="type!=null and type == 'reporter'">
			reporter like CONCAT('%',#{keyword},'%')
		</if>
		<if test="type!=null and type == 'postNo'">
			postNo like CONCAT('%',#{keyword},'%')
		</if>
	</select>

	<insert id="increaseFlag" useGeneratedKeys="true" keyProperty="flagNo" parameterType="com.spring.dto.FlagDTO">
		insert into flag(memberNo, postNo, reportNo, reporter) value(#{memberNo},#{postNo},#{reportNo},#{reporter})
	</insert>

	<select id="checkFlagedAlready" parameterType="java.lang.Integer" resultType="java.lang.String">
		select * from flag where postNo = #{postNo}
	</select>

</mapper>